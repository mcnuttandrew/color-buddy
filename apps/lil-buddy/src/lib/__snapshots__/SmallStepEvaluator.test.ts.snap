// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`Agg Test 1`] = `
[
  LLExpression {
    "inducedVariables": {},
    "nodeType": "expression",
    "value": LLPredicate {
      "inducedVariables": {},
      "left": LLAggregate {
        "children": LLVariable {
          "nodeType": "variable",
          "value": "colors",
        },
        "nodeType": "aggregate",
        "type": "count",
      },
      "nodeType": "predicate",
      "right": LLNumber {
        "nodeType": "number",
        "value": 11,
      },
      "threshold": undefined,
      "type": "<",
    },
  },
  LLPredicate {
    "inducedVariables": {},
    "left": LLNumber {
      "nodeType": "number",
      "value": 2,
    },
    "nodeType": "predicate",
    "right": LLNumber {
      "nodeType": "number",
      "value": 11,
    },
    "threshold": undefined,
    "type": "<",
  },
  LLBool {
    "nodeType": "bool",
    "value": true,
  },
]
`;

exports[`Even distribution 1`] = `
[
  LLExpression {
    "inducedVariables": {},
    "nodeType": "expression",
    "value": LLConjunction {
      "children": [
        LLExpression {
          "nodeType": "expression",
          "value": LLPredicate {
            "left": LLAggregate {
              "children": LLMap {
                "children": LLMap {
                  "children": LLVariable {
                    "nodeType": "variable",
                    "value": "colors",
                  },
                  "func": LLValueFunction {
                    "input": LLVariable {
                      "nodeType": "variable",
                      "value": "x",
                    },
                    "nodeType": "valueFunction",
                    "params": {},
                    "type": "lch.h",
                  },
                  "nodeType": "map",
                  "type": "sort",
                  "varb": "x",
                },
                "func": " ",
                "nodeType": "map",
                "type": "speed",
                "varb": " ",
              },
              "nodeType": "aggregate",
              "type": "std",
            },
            "nodeType": "predicate",
            "right": LLNumber {
              "nodeType": "number",
              "value": 10,
            },
            "threshold": undefined,
            "type": "<",
          },
        },
        LLExpression {
          "nodeType": "expression",
          "value": LLPredicate {
            "left": LLAggregate {
              "children": LLMap {
                "children": LLMap {
                  "children": LLVariable {
                    "nodeType": "variable",
                    "value": "colors",
                  },
                  "func": LLNumberOp {
                    "left": LLNumberOp {
                      "left": LLValueFunction {
                        "input": LLVariable {
                          "nodeType": "variable",
                          "value": "x",
                        },
                        "nodeType": "valueFunction",
                        "params": {},
                        "type": "lch.h",
                      },
                      "nodeType": "numberOp",
                      "right": LLNumber {
                        "nodeType": "number",
                        "value": 180,
                      },
                      "type": "+",
                    },
                    "nodeType": "numberOp",
                    "right": LLNumber {
                      "nodeType": "number",
                      "value": 360,
                    },
                    "type": "%",
                  },
                  "nodeType": "map",
                  "type": "sort",
                  "varb": "x",
                },
                "func": " ",
                "nodeType": "map",
                "type": "speed",
                "varb": " ",
              },
              "nodeType": "aggregate",
              "type": "std",
            },
            "nodeType": "predicate",
            "right": LLNumber {
              "nodeType": "number",
              "value": 10,
            },
            "threshold": undefined,
            "type": "<",
          },
        },
      ],
      "inducedVariables": {},
      "nodeType": "conjunction",
      "type": "or",
    },
  },
  LLConjunction {
    "children": [
      LLPredicate {
        "inducedVariables": {},
        "left": LLAggregate {
          "children": LLMap {
            "children": LLValueArray {
              "children": [
                LLNumber {
                  "nodeType": "number",
                  "value": 40.85764559535954,
                },
                LLNumber {
                  "nodeType": "number",
                  "value": 134.38378630956015,
                },
              ],
              "nodeType": "array",
            },
            "func": " ",
            "inducedVariables": {},
            "nodeType": "map",
            "type": "speed",
            "varb": " ",
          },
          "inducedVariables": {},
          "nodeType": "aggregate",
          "type": "std",
        },
        "nodeType": "predicate",
        "right": LLNumber {
          "nodeType": "number",
          "value": 10,
        },
        "threshold": undefined,
        "type": "<",
      },
      LLExpression {
        "nodeType": "expression",
        "value": LLPredicate {
          "left": LLAggregate {
            "children": LLMap {
              "children": LLMap {
                "children": LLVariable {
                  "nodeType": "variable",
                  "value": "colors",
                },
                "func": LLNumberOp {
                  "left": LLNumberOp {
                    "left": LLValueFunction {
                      "input": LLVariable {
                        "nodeType": "variable",
                        "value": "x",
                      },
                      "nodeType": "valueFunction",
                      "params": {},
                      "type": "lch.h",
                    },
                    "nodeType": "numberOp",
                    "right": LLNumber {
                      "nodeType": "number",
                      "value": 180,
                    },
                    "type": "+",
                  },
                  "nodeType": "numberOp",
                  "right": LLNumber {
                    "nodeType": "number",
                    "value": 360,
                  },
                  "type": "%",
                },
                "nodeType": "map",
                "type": "sort",
                "varb": "x",
              },
              "func": " ",
              "nodeType": "map",
              "type": "speed",
              "varb": " ",
            },
            "nodeType": "aggregate",
            "type": "std",
          },
          "nodeType": "predicate",
          "right": LLNumber {
            "nodeType": "number",
            "value": 10,
          },
          "threshold": undefined,
          "type": "<",
        },
      },
    ],
    "inducedVariables": {},
    "nodeType": "conjunction",
    "type": "or",
  },
  LLConjunction {
    "children": [
      LLPredicate {
        "inducedVariables": {},
        "left": LLAggregate {
          "children": LLValueArray {
            "children": [
              LLNumber {
                "nodeType": "number",
                "value": 93.52614071420061,
              },
            ],
            "nodeType": "array",
          },
          "inducedVariables": {},
          "nodeType": "aggregate",
          "type": "std",
        },
        "nodeType": "predicate",
        "right": LLNumber {
          "nodeType": "number",
          "value": 10,
        },
        "threshold": undefined,
        "type": "<",
      },
      LLExpression {
        "nodeType": "expression",
        "value": LLPredicate {
          "left": LLAggregate {
            "children": LLMap {
              "children": LLMap {
                "children": LLVariable {
                  "nodeType": "variable",
                  "value": "colors",
                },
                "func": LLNumberOp {
                  "left": LLNumberOp {
                    "left": LLValueFunction {
                      "input": LLVariable {
                        "nodeType": "variable",
                        "value": "x",
                      },
                      "nodeType": "valueFunction",
                      "params": {},
                      "type": "lch.h",
                    },
                    "nodeType": "numberOp",
                    "right": LLNumber {
                      "nodeType": "number",
                      "value": 180,
                    },
                    "type": "+",
                  },
                  "nodeType": "numberOp",
                  "right": LLNumber {
                    "nodeType": "number",
                    "value": 360,
                  },
                  "type": "%",
                },
                "nodeType": "map",
                "type": "sort",
                "varb": "x",
              },
              "func": " ",
              "nodeType": "map",
              "type": "speed",
              "varb": " ",
            },
            "nodeType": "aggregate",
            "type": "std",
          },
          "nodeType": "predicate",
          "right": LLNumber {
            "nodeType": "number",
            "value": 10,
          },
          "threshold": undefined,
          "type": "<",
        },
      },
    ],
    "inducedVariables": {},
    "nodeType": "conjunction",
    "type": "or",
  },
  LLConjunction {
    "children": [
      LLPredicate {
        "inducedVariables": {},
        "left": LLNumber {
          "nodeType": "number",
          "value": 0,
        },
        "nodeType": "predicate",
        "right": LLNumber {
          "nodeType": "number",
          "value": 10,
        },
        "threshold": undefined,
        "type": "<",
      },
      LLExpression {
        "nodeType": "expression",
        "value": LLPredicate {
          "left": LLAggregate {
            "children": LLMap {
              "children": LLMap {
                "children": LLVariable {
                  "nodeType": "variable",
                  "value": "colors",
                },
                "func": LLNumberOp {
                  "left": LLNumberOp {
                    "left": LLValueFunction {
                      "input": LLVariable {
                        "nodeType": "variable",
                        "value": "x",
                      },
                      "nodeType": "valueFunction",
                      "params": {},
                      "type": "lch.h",
                    },
                    "nodeType": "numberOp",
                    "right": LLNumber {
                      "nodeType": "number",
                      "value": 180,
                    },
                    "type": "+",
                  },
                  "nodeType": "numberOp",
                  "right": LLNumber {
                    "nodeType": "number",
                    "value": 360,
                  },
                  "type": "%",
                },
                "nodeType": "map",
                "type": "sort",
                "varb": "x",
              },
              "func": " ",
              "nodeType": "map",
              "type": "speed",
              "varb": " ",
            },
            "nodeType": "aggregate",
            "type": "std",
          },
          "nodeType": "predicate",
          "right": LLNumber {
            "nodeType": "number",
            "value": 10,
          },
          "threshold": undefined,
          "type": "<",
        },
      },
    ],
    "inducedVariables": {},
    "nodeType": "conjunction",
    "type": "or",
  },
  LLConjunction {
    "children": [
      LLBool {
        "nodeType": "bool",
        "value": true,
      },
      LLExpression {
        "nodeType": "expression",
        "value": LLPredicate {
          "left": LLAggregate {
            "children": LLMap {
              "children": LLMap {
                "children": LLVariable {
                  "nodeType": "variable",
                  "value": "colors",
                },
                "func": LLNumberOp {
                  "left": LLNumberOp {
                    "left": LLValueFunction {
                      "input": LLVariable {
                        "nodeType": "variable",
                        "value": "x",
                      },
                      "nodeType": "valueFunction",
                      "params": {},
                      "type": "lch.h",
                    },
                    "nodeType": "numberOp",
                    "right": LLNumber {
                      "nodeType": "number",
                      "value": 180,
                    },
                    "type": "+",
                  },
                  "nodeType": "numberOp",
                  "right": LLNumber {
                    "nodeType": "number",
                    "value": 360,
                  },
                  "type": "%",
                },
                "nodeType": "map",
                "type": "sort",
                "varb": "x",
              },
              "func": " ",
              "nodeType": "map",
              "type": "speed",
              "varb": " ",
            },
            "nodeType": "aggregate",
            "type": "std",
          },
          "nodeType": "predicate",
          "right": LLNumber {
            "nodeType": "number",
            "value": 10,
          },
          "threshold": undefined,
          "type": "<",
        },
      },
    ],
    "inducedVariables": {},
    "nodeType": "conjunction",
    "type": "or",
  },
  LLConjunction {
    "children": [
      LLBool {
        "inducedVariables": {},
        "nodeType": "bool",
        "value": true,
      },
      LLPredicate {
        "inducedVariables": {},
        "left": LLAggregate {
          "children": LLMap {
            "children": LLValueArray {
              "children": [
                LLNumber {
                  "nodeType": "number",
                  "value": 220.85764559535954,
                },
                LLNumber {
                  "nodeType": "number",
                  "value": 314.38378630956015,
                },
              ],
              "nodeType": "array",
            },
            "func": " ",
            "inducedVariables": {},
            "nodeType": "map",
            "type": "speed",
            "varb": " ",
          },
          "inducedVariables": {},
          "nodeType": "aggregate",
          "type": "std",
        },
        "nodeType": "predicate",
        "right": LLNumber {
          "nodeType": "number",
          "value": 10,
        },
        "threshold": undefined,
        "type": "<",
      },
    ],
    "inducedVariables": {},
    "nodeType": "conjunction",
    "type": "or",
  },
  LLConjunction {
    "children": [
      LLBool {
        "inducedVariables": {},
        "nodeType": "bool",
        "value": true,
      },
      LLPredicate {
        "inducedVariables": {},
        "left": LLAggregate {
          "children": LLValueArray {
            "children": [
              LLNumber {
                "nodeType": "number",
                "value": 93.52614071420061,
              },
            ],
            "nodeType": "array",
          },
          "inducedVariables": {},
          "nodeType": "aggregate",
          "type": "std",
        },
        "nodeType": "predicate",
        "right": LLNumber {
          "nodeType": "number",
          "value": 10,
        },
        "threshold": undefined,
        "type": "<",
      },
    ],
    "inducedVariables": {},
    "nodeType": "conjunction",
    "type": "or",
  },
  LLConjunction {
    "children": [
      LLBool {
        "inducedVariables": {},
        "nodeType": "bool",
        "value": true,
      },
      LLPredicate {
        "inducedVariables": {},
        "left": LLNumber {
          "nodeType": "number",
          "value": 0,
        },
        "nodeType": "predicate",
        "right": LLNumber {
          "nodeType": "number",
          "value": 10,
        },
        "threshold": undefined,
        "type": "<",
      },
    ],
    "inducedVariables": {},
    "nodeType": "conjunction",
    "type": "or",
  },
  LLConjunction {
    "children": [
      LLBool {
        "inducedVariables": {},
        "nodeType": "bool",
        "value": true,
      },
      LLBool {
        "nodeType": "bool",
        "value": true,
      },
    ],
    "inducedVariables": {},
    "nodeType": "conjunction",
    "type": "or",
  },
  LLBool {
    "inducedVariables": {},
    "nodeType": "bool",
    "value": true,
  },
  LLBool {
    "nodeType": "bool",
    "value": true,
  },
]
`;

exports[`Fair Test 1`] = `
[
  LLExpression {
    "inducedVariables": {},
    "nodeType": "expression",
    "value": LLPredicate {
      "inducedVariables": {},
      "left": LLAggregate {
        "children": LLMap {
          "children": LLVariable {
            "nodeType": "variable",
            "value": "colors",
          },
          "func": LLValueFunction {
            "input": LLVariable {
              "nodeType": "variable",
              "value": "x",
            },
            "nodeType": "valueFunction",
            "params": {},
            "type": "lch.l",
          },
          "nodeType": "map",
          "type": "sort",
          "varb": "x",
        },
        "nodeType": "aggregate",
        "type": "extent",
      },
      "nodeType": "predicate",
      "right": LLNumber {
        "nodeType": "number",
        "value": 50,
      },
      "threshold": undefined,
      "type": "<",
    },
  },
  LLPredicate {
    "inducedVariables": {},
    "left": LLAggregate {
      "children": LLValueArray {
        "children": [
          LLNumber {
            "nodeType": "number",
            "value": 46.278,
          },
          LLNumber {
            "nodeType": "number",
            "value": 54.291,
          },
        ],
        "nodeType": "array",
      },
      "inducedVariables": {},
      "nodeType": "aggregate",
      "type": "extent",
    },
    "nodeType": "predicate",
    "right": LLNumber {
      "nodeType": "number",
      "value": 50,
    },
    "threshold": undefined,
    "type": "<",
  },
  LLPredicate {
    "inducedVariables": {},
    "left": LLNumber {
      "nodeType": "number",
      "value": 8.012999999999998,
    },
    "nodeType": "predicate",
    "right": LLNumber {
      "nodeType": "number",
      "value": 50,
    },
    "threshold": undefined,
    "type": "<",
  },
  LLBool {
    "nodeType": "bool",
    "value": true,
  },
]
`;

exports[`Nested Quantifiers Test 1`] = `
[
  LLExpression {
    "inducedVariables": {},
    "nodeType": "expression",
    "value": LLQuantifier {
      "inducedVariables": {},
      "input": LLVariable {
        "nodeType": "variable",
        "value": "colors",
      },
      "nodeType": "quantifier",
      "predicate": LLQuantifier {
        "input": LLVariable {
          "nodeType": "variable",
          "value": "colors",
        },
        "nodeType": "quantifier",
        "predicate": LLExpression {
          "nodeType": "expression",
          "value": LLConjunction {
            "children": [
              LLExpression {
                "nodeType": "expression",
                "value": LLPredicate {
                  "left": LLValueFunction {
                    "input": LLVariable {
                      "nodeType": "variable",
                      "value": "a",
                    },
                    "nodeType": "valueFunction",
                    "params": {
                      "type": "deuteranopia",
                    },
                    "type": "cvdSim",
                  },
                  "nodeType": "predicate",
                  "right": LLValueFunction {
                    "input": LLVariable {
                      "nodeType": "variable",
                      "value": "b",
                    },
                    "nodeType": "valueFunction",
                    "params": {
                      "type": "deuteranopia",
                    },
                    "type": "cvdSim",
                  },
                  "threshold": 9,
                  "type": "similar",
                },
              },
            ],
            "nodeType": "conjunction",
            "type": "not",
          },
        },
        "type": "all",
        "varbs": [
          "b",
        ],
        "where": LLPredicate {
          "left": LLVariable {
            "nodeType": "variable",
            "value": "index(a)",
          },
          "nodeType": "predicate",
          "right": LLVariable {
            "nodeType": "variable",
            "value": "index(b)",
          },
          "threshold": undefined,
          "type": "!=",
        },
      },
      "type": "all",
      "varbs": [
        "a",
      ],
      "where": undefined,
    },
  },
  {
    "inducedVariables": {},
    "quant": "all",
    "results": [
      {
        "color": "#f00",
        "evals": [
          LLQuantifier {
            "inducedVariables": {
              "a": "#f00",
              "index(a)": 0,
            },
            "input": LLVariable {
              "nodeType": "variable",
              "value": "colors",
            },
            "nodeType": "quantifier",
            "predicate": LLExpression {
              "nodeType": "expression",
              "value": LLConjunction {
                "children": [
                  LLExpression {
                    "nodeType": "expression",
                    "value": LLPredicate {
                      "left": LLValueFunction {
                        "input": LLVariable {
                          "nodeType": "variable",
                          "value": "a",
                        },
                        "nodeType": "valueFunction",
                        "params": {
                          "type": "deuteranopia",
                        },
                        "type": "cvdSim",
                      },
                      "nodeType": "predicate",
                      "right": LLValueFunction {
                        "input": LLVariable {
                          "nodeType": "variable",
                          "value": "b",
                        },
                        "nodeType": "valueFunction",
                        "params": {
                          "type": "deuteranopia",
                        },
                        "type": "cvdSim",
                      },
                      "threshold": 9,
                      "type": "similar",
                    },
                  },
                ],
                "nodeType": "conjunction",
                "type": "not",
              },
            },
            "type": "all",
            "varbs": [
              "b",
            ],
            "where": LLPredicate {
              "left": LLVariable {
                "nodeType": "variable",
                "value": "index(a)",
              },
              "nodeType": "predicate",
              "right": LLVariable {
                "nodeType": "variable",
                "value": "index(b)",
              },
              "threshold": undefined,
              "type": "!=",
            },
          },
          {
            "inducedVariables": {
              "a": "#f00",
              "index(a)": 0,
            },
            "quant": "all",
            "results": [
              {
                "color": "#f00",
                "didEval": true,
                "result": "WHERE SKIP",
              },
              {
                "color": "#008000",
                "evals": [
                  LLConjunction {
                    "children": [
                      LLExpression {
                        "nodeType": "expression",
                        "value": LLPredicate {
                          "left": LLValueFunction {
                            "input": LLVariable {
                              "nodeType": "variable",
                              "value": "a",
                            },
                            "nodeType": "valueFunction",
                            "params": {
                              "type": "deuteranopia",
                            },
                            "type": "cvdSim",
                          },
                          "nodeType": "predicate",
                          "right": LLValueFunction {
                            "input": LLVariable {
                              "nodeType": "variable",
                              "value": "b",
                            },
                            "nodeType": "valueFunction",
                            "params": {
                              "type": "deuteranopia",
                            },
                            "type": "cvdSim",
                          },
                          "threshold": 9,
                          "type": "similar",
                        },
                      },
                    ],
                    "inducedVariables": {
                      "a": "#f00",
                      "b": "#008000",
                      "index(a)": 0,
                      "index(b)": 1,
                    },
                    "nodeType": "conjunction",
                    "type": "not",
                  },
                  LLConjunction {
                    "children": [
                      LLPredicate {
                        "inducedVariables": {
                          "a": "#f00",
                          "b": "#008000",
                          "index(a)": 0,
                          "index(b)": 1,
                        },
                        "left": LLColor {
                          "constructorString": "#9b9b00",
                          "nodeType": "color",
                          "value": CIELAB {
                            "channels": {
                              "L": 62.46057567197121,
                              "a": -10.877327253457691,
                              "b": 64.50055351868562,
                            },
                            "spaceName": "lab",
                            "tags": [],
                          },
                        },
                        "nodeType": "predicate",
                        "right": LLValueFunction {
                          "input": LLVariable {
                            "nodeType": "variable",
                            "value": "b",
                          },
                          "nodeType": "valueFunction",
                          "params": {
                            "type": "deuteranopia",
                          },
                          "type": "cvdSim",
                        },
                        "threshold": 9,
                        "type": "similar",
                      },
                    ],
                    "inducedVariables": {
                      "a": "#f00",
                      "b": "#008000",
                      "index(a)": 0,
                      "index(b)": 1,
                    },
                    "nodeType": "conjunction",
                    "type": "not",
                  },
                  LLConjunction {
                    "children": [
                      LLPredicate {
                        "inducedVariables": {
                          "a": "#f00",
                          "b": "#008000",
                          "index(a)": 0,
                          "index(b)": 1,
                        },
                        "left": LLColor {
                          "constructorString": "#9b9b00",
                          "inducedVariables": {
                            "a": "#f00",
                            "b": "#008000",
                            "index(a)": 0,
                            "index(b)": 1,
                          },
                          "nodeType": "color",
                          "value": CIELAB {
                            "channels": {
                              "L": 62.46057567197121,
                              "a": -10.877327253457691,
                              "b": 64.50055351868562,
                            },
                            "spaceName": "lab",
                            "tags": [],
                          },
                        },
                        "nodeType": "predicate",
                        "right": LLColor {
                          "constructorString": "#6a6a16",
                          "nodeType": "color",
                          "value": CIELAB {
                            "channels": {
                              "L": 43.76722055724194,
                              "a": -7.7956612798162075,
                              "b": 43.56344576087999,
                            },
                            "spaceName": "lab",
                            "tags": [],
                          },
                        },
                        "threshold": 9,
                        "type": "similar",
                      },
                    ],
                    "inducedVariables": {
                      "a": "#f00",
                      "b": "#008000",
                      "index(a)": 0,
                      "index(b)": 1,
                    },
                    "nodeType": "conjunction",
                    "type": "not",
                  },
                  LLConjunction {
                    "children": [
                      LLBool {
                        "nodeType": "bool",
                        "value": false,
                      },
                    ],
                    "inducedVariables": {
                      "a": "#f00",
                      "b": "#008000",
                      "index(a)": 0,
                      "index(b)": 1,
                    },
                    "nodeType": "conjunction",
                    "type": "not",
                  },
                  LLBool {
                    "inducedVariables": {
                      "a": "#f00",
                      "b": "#008000",
                      "index(a)": 0,
                      "index(b)": 1,
                    },
                    "nodeType": "bool",
                    "value": true,
                  },
                  LLBool {
                    "nodeType": "bool",
                    "value": true,
                  },
                ],
              },
            ],
            "varb": "b",
          },
          LLBool {
            "nodeType": "bool",
            "value": false,
          },
        ],
      },
      {
        "color": "#008000",
        "evals": [
          LLQuantifier {
            "inducedVariables": {
              "a": "#008000",
              "index(a)": 1,
            },
            "input": LLVariable {
              "nodeType": "variable",
              "value": "colors",
            },
            "nodeType": "quantifier",
            "predicate": LLExpression {
              "nodeType": "expression",
              "value": LLConjunction {
                "children": [
                  LLExpression {
                    "nodeType": "expression",
                    "value": LLPredicate {
                      "left": LLValueFunction {
                        "input": LLVariable {
                          "nodeType": "variable",
                          "value": "a",
                        },
                        "nodeType": "valueFunction",
                        "params": {
                          "type": "deuteranopia",
                        },
                        "type": "cvdSim",
                      },
                      "nodeType": "predicate",
                      "right": LLValueFunction {
                        "input": LLVariable {
                          "nodeType": "variable",
                          "value": "b",
                        },
                        "nodeType": "valueFunction",
                        "params": {
                          "type": "deuteranopia",
                        },
                        "type": "cvdSim",
                      },
                      "threshold": 9,
                      "type": "similar",
                    },
                  },
                ],
                "nodeType": "conjunction",
                "type": "not",
              },
            },
            "type": "all",
            "varbs": [
              "b",
            ],
            "where": LLPredicate {
              "left": LLVariable {
                "nodeType": "variable",
                "value": "index(a)",
              },
              "nodeType": "predicate",
              "right": LLVariable {
                "nodeType": "variable",
                "value": "index(b)",
              },
              "threshold": undefined,
              "type": "!=",
            },
          },
          {
            "inducedVariables": {
              "a": "#008000",
              "index(a)": 1,
            },
            "quant": "all",
            "results": [
              {
                "color": "#f00",
                "evals": [
                  LLConjunction {
                    "children": [
                      LLExpression {
                        "nodeType": "expression",
                        "value": LLPredicate {
                          "left": LLValueFunction {
                            "input": LLVariable {
                              "nodeType": "variable",
                              "value": "a",
                            },
                            "nodeType": "valueFunction",
                            "params": {
                              "type": "deuteranopia",
                            },
                            "type": "cvdSim",
                          },
                          "nodeType": "predicate",
                          "right": LLValueFunction {
                            "input": LLVariable {
                              "nodeType": "variable",
                              "value": "b",
                            },
                            "nodeType": "valueFunction",
                            "params": {
                              "type": "deuteranopia",
                            },
                            "type": "cvdSim",
                          },
                          "threshold": 9,
                          "type": "similar",
                        },
                      },
                    ],
                    "inducedVariables": {
                      "a": "#008000",
                      "b": "#f00",
                      "index(a)": 1,
                      "index(b)": 0,
                    },
                    "nodeType": "conjunction",
                    "type": "not",
                  },
                  LLConjunction {
                    "children": [
                      LLPredicate {
                        "inducedVariables": {
                          "a": "#008000",
                          "b": "#f00",
                          "index(a)": 1,
                          "index(b)": 0,
                        },
                        "left": LLColor {
                          "constructorString": "#6a6a16",
                          "nodeType": "color",
                          "value": CIELAB {
                            "channels": {
                              "L": 43.76722055724194,
                              "a": -7.7956612798162075,
                              "b": 43.56344576087999,
                            },
                            "spaceName": "lab",
                            "tags": [],
                          },
                        },
                        "nodeType": "predicate",
                        "right": LLValueFunction {
                          "input": LLVariable {
                            "nodeType": "variable",
                            "value": "b",
                          },
                          "nodeType": "valueFunction",
                          "params": {
                            "type": "deuteranopia",
                          },
                          "type": "cvdSim",
                        },
                        "threshold": 9,
                        "type": "similar",
                      },
                    ],
                    "inducedVariables": {
                      "a": "#008000",
                      "b": "#f00",
                      "index(a)": 1,
                      "index(b)": 0,
                    },
                    "nodeType": "conjunction",
                    "type": "not",
                  },
                  LLConjunction {
                    "children": [
                      LLPredicate {
                        "inducedVariables": {
                          "a": "#008000",
                          "b": "#f00",
                          "index(a)": 1,
                          "index(b)": 0,
                        },
                        "left": LLColor {
                          "constructorString": "#6a6a16",
                          "inducedVariables": {
                            "a": "#008000",
                            "b": "#f00",
                            "index(a)": 1,
                            "index(b)": 0,
                          },
                          "nodeType": "color",
                          "value": CIELAB {
                            "channels": {
                              "L": 43.76722055724194,
                              "a": -7.7956612798162075,
                              "b": 43.56344576087999,
                            },
                            "spaceName": "lab",
                            "tags": [],
                          },
                        },
                        "nodeType": "predicate",
                        "right": LLColor {
                          "constructorString": "#9b9b00",
                          "nodeType": "color",
                          "value": CIELAB {
                            "channels": {
                              "L": 62.46057567197121,
                              "a": -10.877327253457691,
                              "b": 64.50055351868562,
                            },
                            "spaceName": "lab",
                            "tags": [],
                          },
                        },
                        "threshold": 9,
                        "type": "similar",
                      },
                    ],
                    "inducedVariables": {
                      "a": "#008000",
                      "b": "#f00",
                      "index(a)": 1,
                      "index(b)": 0,
                    },
                    "nodeType": "conjunction",
                    "type": "not",
                  },
                  LLConjunction {
                    "children": [
                      LLBool {
                        "nodeType": "bool",
                        "value": false,
                      },
                    ],
                    "inducedVariables": {
                      "a": "#008000",
                      "b": "#f00",
                      "index(a)": 1,
                      "index(b)": 0,
                    },
                    "nodeType": "conjunction",
                    "type": "not",
                  },
                  LLBool {
                    "inducedVariables": {
                      "a": "#008000",
                      "b": "#f00",
                      "index(a)": 1,
                      "index(b)": 0,
                    },
                    "nodeType": "bool",
                    "value": true,
                  },
                  LLBool {
                    "nodeType": "bool",
                    "value": true,
                  },
                ],
              },
              {
                "color": "#008000",
                "didEval": true,
                "result": "WHERE SKIP",
              },
            ],
            "varb": "b",
          },
          LLBool {
            "nodeType": "bool",
            "value": false,
          },
        ],
      },
    ],
    "varb": "a",
  },
  LLBool {
    "nodeType": "bool",
    "value": true,
  },
]
`;

exports[`Quantifier Rewrite Test 1 1`] = `
LLExpression {
  "nodeType": "expression",
  "value": LLQuantifier {
    "input": LLVariable {
      "nodeType": "variable",
      "value": "colors",
    },
    "nodeType": "quantifier",
    "predicate": LLQuantifier {
      "input": LLVariable {
        "nodeType": "variable",
        "value": "colors",
      },
      "nodeType": "quantifier",
      "predicate": LLExpression {
        "nodeType": "expression",
        "value": LLConjunction {
          "children": [
            LLExpression {
              "nodeType": "expression",
              "value": LLPredicate {
                "left": LLValueFunction {
                  "input": LLVariable {
                    "nodeType": "variable",
                    "value": "a",
                  },
                  "nodeType": "valueFunction",
                  "params": {
                    "type": "deuteranopia",
                  },
                  "type": "cvdSim",
                },
                "nodeType": "predicate",
                "right": LLValueFunction {
                  "input": LLVariable {
                    "nodeType": "variable",
                    "value": "b",
                  },
                  "nodeType": "valueFunction",
                  "params": {
                    "type": "deuteranopia",
                  },
                  "type": "cvdSim",
                },
                "threshold": 9,
                "type": "similar",
              },
            },
          ],
          "nodeType": "conjunction",
          "type": "not",
        },
      },
      "type": "all",
      "varbs": [
        "b",
      ],
      "where": LLPredicate {
        "left": LLVariable {
          "nodeType": "variable",
          "value": "index(a)",
        },
        "nodeType": "predicate",
        "right": LLVariable {
          "nodeType": "variable",
          "value": "index(b)",
        },
        "threshold": undefined,
        "type": "!=",
      },
    },
    "type": "all",
    "varbs": [
      "a",
    ],
    "where": undefined,
  },
}
`;

exports[`Quantifier Rewrite Test 3 1`] = `
LLExpression {
  "nodeType": "expression",
  "value": LLQuantifier {
    "input": LLVariable {
      "nodeType": "variable",
      "value": "colors",
    },
    "nodeType": "quantifier",
    "predicate": LLQuantifier {
      "input": LLVariable {
        "nodeType": "variable",
        "value": "colors",
      },
      "nodeType": "quantifier",
      "predicate": LLQuantifier {
        "input": LLVariable {
          "nodeType": "variable",
          "value": "colors",
        },
        "nodeType": "quantifier",
        "predicate": LLExpression {
          "nodeType": "expression",
          "value": LLBool {
            "nodeType": "bool",
            "value": true,
          },
        },
        "type": "all",
        "varbs": [
          "c",
        ],
        "where": LLPredicate {
          "left": LLVariable {
            "nodeType": "variable",
            "value": "index(a)",
          },
          "nodeType": "predicate",
          "right": LLVariable {
            "nodeType": "variable",
            "value": "index(b)",
          },
          "threshold": undefined,
          "type": "!=",
        },
      },
      "type": "all",
      "varbs": [
        "b",
      ],
      "where": undefined,
    },
    "type": "all",
    "varbs": [
      "a",
    ],
    "where": undefined,
  },
}
`;

exports[`Quantifier Test 1`] = `
[
  LLExpression {
    "inducedVariables": {},
    "nodeType": "expression",
    "value": LLQuantifier {
      "inducedVariables": {},
      "input": LLVariable {
        "nodeType": "variable",
        "value": "colors",
      },
      "nodeType": "quantifier",
      "predicate": LLExpression {
        "nodeType": "expression",
        "value": LLPredicate {
          "left": LLPairFunction {
            "left": LLVariable {
              "nodeType": "variable",
              "value": "a",
            },
            "nodeType": "pairFunction",
            "params": {
              "algorithm": "WCAG21",
            },
            "right": LLVariable {
              "nodeType": "variable",
              "value": "background",
            },
            "type": "contrast",
          },
          "nodeType": "predicate",
          "right": LLNumber {
            "nodeType": "number",
            "value": 3,
          },
          "threshold": undefined,
          "type": ">",
        },
      },
      "type": "all",
      "varbs": [
        "a",
      ],
      "where": undefined,
    },
  },
  {
    "inducedVariables": {},
    "quant": "all",
    "results": [
      {
        "color": "#f00",
        "evals": [
          LLPredicate {
            "inducedVariables": {
              "a": "#f00",
              "index(a)": 0,
            },
            "left": LLPairFunction {
              "left": LLVariable {
                "nodeType": "variable",
                "value": "a",
              },
              "nodeType": "pairFunction",
              "params": {
                "algorithm": "WCAG21",
              },
              "right": LLVariable {
                "nodeType": "variable",
                "value": "background",
              },
              "type": "contrast",
            },
            "nodeType": "predicate",
            "right": LLNumber {
              "nodeType": "number",
              "value": 3,
            },
            "threshold": undefined,
            "type": ">",
          },
          LLPredicate {
            "inducedVariables": {
              "a": "#f00",
              "index(a)": 0,
            },
            "left": LLNumber {
              "nodeType": "number",
              "value": 3.997818803850546,
            },
            "nodeType": "predicate",
            "right": LLNumber {
              "nodeType": "number",
              "value": 3,
            },
            "threshold": undefined,
            "type": ">",
          },
          LLBool {
            "nodeType": "bool",
            "value": true,
          },
        ],
      },
      {
        "color": "#008000",
        "evals": [
          LLPredicate {
            "inducedVariables": {
              "a": "#008000",
              "index(a)": 1,
            },
            "left": LLPairFunction {
              "left": LLVariable {
                "nodeType": "variable",
                "value": "a",
              },
              "nodeType": "pairFunction",
              "params": {
                "algorithm": "WCAG21",
              },
              "right": LLVariable {
                "nodeType": "variable",
                "value": "background",
              },
              "type": "contrast",
            },
            "nodeType": "predicate",
            "right": LLNumber {
              "nodeType": "number",
              "value": 3,
            },
            "threshold": undefined,
            "type": ">",
          },
          LLPredicate {
            "inducedVariables": {
              "a": "#008000",
              "index(a)": 1,
            },
            "left": LLNumber {
              "nodeType": "number",
              "value": 5.137518325903408,
            },
            "nodeType": "predicate",
            "right": LLNumber {
              "nodeType": "number",
              "value": 3,
            },
            "threshold": undefined,
            "type": ">",
          },
          LLBool {
            "nodeType": "bool",
            "value": true,
          },
        ],
      },
    ],
    "varb": "a",
  },
  LLBool {
    "nodeType": "bool",
    "value": true,
  },
]
`;

exports[`Quantifier Test 2 1`] = `
[
  LLExpression {
    "inducedVariables": {},
    "nodeType": "expression",
    "value": LLQuantifier {
      "inducedVariables": {},
      "input": LLVariable {
        "nodeType": "variable",
        "value": "colors",
      },
      "nodeType": "quantifier",
      "predicate": LLExpression {
        "nodeType": "expression",
        "value": LLPredicate {
          "left": LLValueFunction {
            "input": LLVariable {
              "nodeType": "variable",
              "value": "a",
            },
            "nodeType": "valueFunction",
            "params": {},
            "type": "inGamut",
          },
          "nodeType": "predicate",
          "right": LLBool {
            "nodeType": "bool",
            "value": true,
          },
          "threshold": undefined,
          "type": "==",
        },
      },
      "type": "all",
      "varbs": [
        "a",
      ],
      "where": undefined,
    },
  },
  {
    "inducedVariables": {},
    "quant": "all",
    "results": [
      {
        "color": "#f00",
        "evals": [
          LLPredicate {
            "inducedVariables": {
              "a": "#f00",
              "index(a)": 0,
            },
            "left": LLValueFunction {
              "input": LLVariable {
                "nodeType": "variable",
                "value": "a",
              },
              "nodeType": "valueFunction",
              "params": {},
              "type": "inGamut",
            },
            "nodeType": "predicate",
            "right": LLBool {
              "nodeType": "bool",
              "value": true,
            },
            "threshold": undefined,
            "type": "==",
          },
          LLPredicate {
            "inducedVariables": {
              "a": "#f00",
              "index(a)": 0,
            },
            "left": LLBool {
              "nodeType": "bool",
              "value": true,
            },
            "nodeType": "predicate",
            "right": LLBool {
              "nodeType": "bool",
              "value": true,
            },
            "threshold": undefined,
            "type": "==",
          },
          LLBool {
            "nodeType": "bool",
            "value": true,
          },
        ],
      },
      {
        "color": "#008000",
        "evals": [
          LLPredicate {
            "inducedVariables": {
              "a": "#008000",
              "index(a)": 1,
            },
            "left": LLValueFunction {
              "input": LLVariable {
                "nodeType": "variable",
                "value": "a",
              },
              "nodeType": "valueFunction",
              "params": {},
              "type": "inGamut",
            },
            "nodeType": "predicate",
            "right": LLBool {
              "nodeType": "bool",
              "value": true,
            },
            "threshold": undefined,
            "type": "==",
          },
          LLPredicate {
            "inducedVariables": {
              "a": "#008000",
              "index(a)": 1,
            },
            "left": LLBool {
              "nodeType": "bool",
              "value": true,
            },
            "nodeType": "predicate",
            "right": LLBool {
              "nodeType": "bool",
              "value": true,
            },
            "threshold": undefined,
            "type": "==",
          },
          LLBool {
            "nodeType": "bool",
            "value": true,
          },
        ],
      },
    ],
    "varb": "a",
  },
  LLBool {
    "nodeType": "bool",
    "value": true,
  },
]
`;

exports[`SmallStepEvaluator works 1`] = `
[
  LLExpression {
    "inducedVariables": {
      "a": "#f00",
      "b": "#008000",
    },
    "nodeType": "expression",
    "value": LLPredicate {
      "inducedVariables": {
        "a": "#f00",
        "b": "#008000",
      },
      "left": LLPairFunction {
        "left": LLVariable {
          "nodeType": "variable",
          "value": "a",
        },
        "nodeType": "pairFunction",
        "params": {
          "algorithm": "2000",
        },
        "right": LLVariable {
          "nodeType": "variable",
          "value": "b",
        },
        "type": "deltaE",
      },
      "nodeType": "predicate",
      "right": LLNumber {
        "nodeType": "number",
        "value": 10,
      },
      "threshold": undefined,
      "type": ">",
    },
  },
  LLPredicate {
    "inducedVariables": {
      "a": "#f00",
      "b": "#008000",
    },
    "left": LLNumber {
      "nodeType": "number",
      "value": 70.2365636120491,
    },
    "nodeType": "predicate",
    "right": LLNumber {
      "nodeType": "number",
      "value": 10,
    },
    "threshold": undefined,
    "type": ">",
  },
  LLBool {
    "nodeType": "bool",
    "value": true,
  },
]
`;

exports[`SmallStepEvaluator works with small not example 1`] = `
[
  LLExpression {
    "inducedVariables": {},
    "nodeType": "expression",
    "value": LLConjunction {
      "children": [
        LLExpression {
          "nodeType": "expression",
          "value": LLPredicate {
            "left": LLNumber {
              "nodeType": "number",
              "value": 11,
            },
            "nodeType": "predicate",
            "right": LLNumber {
              "nodeType": "number",
              "value": 10,
            },
            "threshold": undefined,
            "type": ">",
          },
        },
      ],
      "inducedVariables": {},
      "nodeType": "conjunction",
      "type": "not",
    },
  },
  LLConjunction {
    "children": [
      LLBool {
        "nodeType": "bool",
        "value": true,
      },
    ],
    "inducedVariables": {},
    "nodeType": "conjunction",
    "type": "not",
  },
  LLBool {
    "inducedVariables": {},
    "nodeType": "bool",
    "value": false,
  },
  LLBool {
    "nodeType": "bool",
    "value": false,
  },
]
`;

exports[`SmallStepEvaluator works with smaller example 1`] = `
[
  LLExpression {
    "inducedVariables": {},
    "nodeType": "expression",
    "value": LLPredicate {
      "inducedVariables": {},
      "left": LLNumber {
        "nodeType": "number",
        "value": 11,
      },
      "nodeType": "predicate",
      "right": LLNumber {
        "nodeType": "number",
        "value": 10,
      },
      "threshold": undefined,
      "type": ">",
    },
  },
  LLBool {
    "nodeType": "bool",
    "value": true,
  },
]
`;
