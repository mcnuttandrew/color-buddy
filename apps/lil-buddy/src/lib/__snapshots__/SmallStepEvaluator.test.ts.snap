// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`Agg Test 1`] = `
[
  LLExpression {
    "nodeType": "expression",
    "value": LLPredicate {
      "left": LLAggregate {
        "children": LLVariable {
          "nodeType": "variable",
          "value": "colors",
        },
        "nodeType": "aggregate",
        "type": "count",
      },
      "nodeType": "predicate",
      "right": LLNumber {
        "nodeType": "number",
        "value": 11,
      },
      "threshold": undefined,
      "type": "<",
    },
  },
  LLPredicate {
    "left": LLNumber {
      "nodeType": "number",
      "value": 2,
    },
    "nodeType": "predicate",
    "right": LLNumber {
      "nodeType": "number",
      "value": 11,
    },
    "threshold": undefined,
    "type": "<",
  },
  LLBool {
    "nodeType": "bool",
    "value": true,
  },
]
`;

exports[`Fair Test 1`] = `
[
  LLExpression {
    "nodeType": "expression",
    "value": LLPredicate {
      "left": LLAggregate {
        "children": LLMap {
          "children": LLVariable {
            "nodeType": "variable",
            "value": "colors",
          },
          "func": LLValueFunction {
            "input": LLVariable {
              "nodeType": "variable",
              "value": "x",
            },
            "nodeType": "valueFunction",
            "params": {},
            "type": "lch.l",
          },
          "nodeType": "map",
          "type": "sort",
          "varb": "x",
        },
        "nodeType": "aggregate",
        "type": "extent",
      },
      "nodeType": "predicate",
      "right": LLNumber {
        "nodeType": "number",
        "value": 50,
      },
      "threshold": undefined,
      "type": "<",
    },
  },
  LLPredicate {
    "left": LLAggregate {
      "children": LLValueArray {
        "children": [
          LLNumber {
            "nodeType": "number",
            "value": 46.278,
          },
          LLNumber {
            "nodeType": "number",
            "value": 54.291,
          },
        ],
        "nodeType": "array",
      },
      "nodeType": "aggregate",
      "type": "extent",
    },
    "nodeType": "predicate",
    "right": LLNumber {
      "nodeType": "number",
      "value": 50,
    },
    "threshold": undefined,
    "type": "<",
  },
  LLPredicate {
    "left": LLNumber {
      "nodeType": "number",
      "value": 8.012999999999998,
    },
    "nodeType": "predicate",
    "right": LLNumber {
      "nodeType": "number",
      "value": 50,
    },
    "threshold": undefined,
    "type": "<",
  },
  LLBool {
    "nodeType": "bool",
    "value": true,
  },
]
`;

exports[`SmallStepEvaluator works 1`] = `
[
  LLExpression {
    "nodeType": "expression",
    "value": LLPredicate {
      "left": LLPairFunction {
        "left": LLVariable {
          "nodeType": "variable",
          "value": "a",
        },
        "nodeType": "pairFunction",
        "params": {
          "algorithm": "2000",
        },
        "right": LLVariable {
          "nodeType": "variable",
          "value": "b",
        },
        "type": "deltaE",
      },
      "nodeType": "predicate",
      "right": LLNumber {
        "nodeType": "number",
        "value": 10,
      },
      "threshold": undefined,
      "type": ">",
    },
  },
  LLPredicate {
    "left": LLNumber {
      "nodeType": "number",
      "value": 70.2365636120491,
    },
    "nodeType": "predicate",
    "right": LLNumber {
      "nodeType": "number",
      "value": 10,
    },
    "threshold": undefined,
    "type": ">",
  },
  LLBool {
    "nodeType": "bool",
    "value": true,
  },
]
`;

exports[`SmallStepEvaluator works with small not example 1`] = `
[
  LLExpression {
    "nodeType": "expression",
    "value": LLConjunction {
      "children": [
        LLExpression {
          "nodeType": "expression",
          "value": LLPredicate {
            "left": LLNumber {
              "nodeType": "number",
              "value": 11,
            },
            "nodeType": "predicate",
            "right": LLNumber {
              "nodeType": "number",
              "value": 10,
            },
            "threshold": undefined,
            "type": ">",
          },
        },
      ],
      "nodeType": "conjunction",
      "type": "not",
    },
  },
  LLConjunction {
    "children": [
      LLBool {
        "nodeType": "bool",
        "value": true,
      },
    ],
    "nodeType": "conjunction",
    "type": "not",
  },
  LLBool {
    "nodeType": "bool",
    "value": false,
  },
]
`;

exports[`SmallStepEvaluator works with smaller example 1`] = `
[
  LLExpression {
    "nodeType": "expression",
    "value": LLPredicate {
      "left": LLNumber {
        "nodeType": "number",
        "value": 11,
      },
      "nodeType": "predicate",
      "right": LLNumber {
        "nodeType": "number",
        "value": 10,
      },
      "threshold": undefined,
      "type": ">",
    },
  },
  LLBool {
    "nodeType": "bool",
    "value": true,
  },
]
`;
