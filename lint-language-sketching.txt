# Usability Checks
Color Name discriminability: ALL colors a, ALL colors b, NAME(a) != NAME(b)
Thin Discriminability: ALL colors a, ALL colors b, diff(a, b, 'lab') > jnd(thin)
Medium Discriminability: ALL colors a, ALL colors b, diff(a, b, 'lab') > jnd(medium)
Wide Discriminability: ALL colors a, ALL colors b, diff(a, b, 'lab') > jnd(wide)
Sequential: OR (ALL_SEQ colors next current, lab(current, l) > lab(next, l)) (ALL_SEQ colors next current, lab(current, l) < lab(next, l))
Diverging: EXIST c in colors, 
    ALL SEQ a, where indexof(a) < indexof(c), lab(a, l) < lab(c, l) AND 
    ALL SEQ b, where indexof(b) > indexof(c), lab(b, l) > lab(c, l)

# Aesthetics Checks -> MS suggests dropping this, as it captures too much
# Design Checks | Constraints 
Max Colors: count(colors) < threshold
Palette does not have ugly colors: NOT ALL c in colors, ALL u in ugly, c similar to u
Avoid extreme colors: NOT ALL c in colors, ALL e in extreme, c equal to e
Fair: range(colors, lch, c) < threshold_1 AND range(colors, lch, l) < threshold_2

# Accessibility Checks
Colorblind Friendly for deuteranopia: ALL colors a, ALL colors b, NOT (sim(a) similar to sim(b))
Colorblind Friendly for protanopia:   ALL colors a, ALL colors b, NOT (sim(a) similar to sim(b))
Colorblind Friendly for tritanopia:   ALL colors a, ALL colors b, NOT (sim(a) similar to sim(b))
All colors differentiable from background: ALL colors c, deltaE(c, bg) > threshold
Background Contrast: ALL colors c, contrast(c, bg) > threshold

# Ad Hoc-y ideas: 
All complementary Pairs: ALL colors a, EXIST color b, hue(a) approx hue(b) + PI
Exist complementary pair: EXIST colors a, EXIST color b, hue(a) approx hue(b) + PI
All monochromatic: ALL colors a, EXIST color b, hue(a) approx hue(b)

Gender Colors Not Conformist: NOT ((EXIST color a similar to "LIGHT BLUE") AND (EXIST color b similar to "PINK"))
Specific value included: EXIST color a, value(a) equal to "uber blue"

Color semantics (cf semantic color paper)
Grass should be green, ocean should be shades of blue
Brand colors 


# Affective Color Assertions
"Highly saturated light colors will not be appropriate for SERIOUS/TRUST/CALM": ALL (FILTER colors c, lab(c) > threshold) b, NOT hsl(b) > threshold
"light blues, beiges, and grays are appropriate for PLAYFUL"
"dark reds and browns are not POSITIVE": ALL colors c, NOT (c similar to "DARK RED" OR c similar to "BROWN")
"light colors, particularly greens, do not communicate NEGATIVE": ALL colors c, NOT (c similar to "GREEN" AND lab(l) > threshold) maybe more messaging that one?
"trustworthy has two thematic strategies (blue-gray, green-gray) bridge by a common color (yellow)": AND (EXIST color a, a similar to yellow) .......





Predicates: approx, equal to, similar to
Pair functions: contrast, deltaE
Reduces: count, range
Value functions: sim, name, space

Program: e

Expressions (e) => T | F | (e, e) => T | F
e = NOT e | AND e[] | OR e[] | p | Q (v[] | colors) p | T | F | if e e e

Values
v' = n  | c | var
v  = v' | c[] | var[] | m v[] | r v[] | pf v' v'

Quantifiers: 
Q =  ∀ | ∃ | ∀_SEQ

Maps:
m = filter vf | extent vf | sort vf | map vf

Reduces
r = count | range | sum | min | max | mean | median | mode | std --- range is wrong

Predicates (v, v) => T | F
p = > v v | < v v | ~= v v | == v v | 

Value functions (c) => v
vf = space.channel | name | cvd_sim

Pair functions (c, c) => v
pf = contrast | deltaE

YAML syntax, color blindness
all: 
    input: colors,
    value: 'a',
    predicate: 
        all: 
            colors,
            value: 'b',
            predicate: 
                not: 
                    equal: 
                        left:  {cvd_sim: 'a', type: 'deuteranopia'}
                        right: {cvd_sim: 'b', type: 'deuteranopia'}

YAML syntax, max colors
<: 
    left:  {count: colors}
    right: {value: 10}

YAML syntax, Exist complementary pair:
exist: 
    input: colors,
    value: 'a',
    predicate: 
        exist: 
            colors,
            value: 'b',
            predicate: 
                equal: 
                    left:  {hue: 'a'}
                    right: {hue: 'b', offset: 180}

YAML syntax, Specific value included:
exist: 
    input: colors,
    value: 'a',
    predicate: 
        equal: 
            left:  {value: 'a'}
            right: {value: 'uber blue'}

YAML syntax, ALL (FILTER colors c, lab(c) > threshold) b, NOT hsl(b) > threshold
all: 
    input: 
        filter: 
            input: colors
            value: 'c'
            predicate: 
                greater: 
                    left:  {lab: 'c'}
                    right: {value: threshold}
    value: 'a',
    predicate: 
        not: 
            greater: 
                left:  {hsl: 'a'}
                right: {value: threshold}

